#!/usr/bin/env ruby

# ------------------------------------------------------------------------------
# Simple Amazon EC2 instance manager
# --kmatthias Tue Apr 13 20:52:25 PDT 2010
# ------------------------------------------------------------------------------

# Many values are read from the YAML config ~/.ec2rc.  Run 'ec2 config' to
# create it for the first time.

# Help bundler find the gemfile, which is in the same path as the executable.
# Doesn't work with symlinked executable...
require 'rubygems'
require 'amazon_sdb'
require 'right_aws'
require 'yaml'

# Give RightAWS the certificate authority file to avoid warnings and be more secure
Rightscale::HttpConnection.params[:ca_file] = File.join(File.expand_path(File.dirname(__FILE__)), 'ca-certificates.crt')

$all_instances = nil

class String
  def underscore
    self.gsub(/::/, '/').
      gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
      gsub(/([a-z\d])([A-Z])/,'\1_\2').
      tr("-", "_").
      downcase
  end
end


class SDB

	def initialize 
		# This does not actually stay connected, it's stateless
		@b = Amazon::SDB::Base.new($config['access_key'], $config['secret_access_key'])
		@sdb_domain = @b.domain 'ec2_names'

		if @sdb_domain.nil?
			# Try to make a new domain if we can't find an existing one
			@sdb_domain = b.create_domain 'ec2_names'
		end

		if @sdb_domain.nil?
			raise SocketError, "Unable to connect to ec2_names domain on SDB."
		end
	end

	def get_attributes name
		attrs = {}
		begin
			attrs = @sdb_domain.get_attributes(name).attributes.to_h
		rescue Amazon::SDB::RecordNotFoundError
			# do nothing
		end

		return attrs
	end

	def put_attributes name, attrs
		values = Amazon::SDB::Multimap.new 
		# Multimap won't take hash as a param to the constructor...
		attrs.each { |key, value| values[key] = value }

		@sdb_domain.put_attributes(name, values)
	end

	def delete_attributes name
		entry = nil
		begin
			entry = @sdb_domain.get_attributes name
			entry.destroy!
		rescue Amazon::SDB::RecordNotFoundError
			# do nothing
		end
	end

	def get_all
		@sdb_domain.query
	end

end

class EC2Instances

	def initialize 
		@sdb = SDB.new 
	end

        def self.ec2_object
          @ec2 ||= begin
                     options = { :cache => true, :logger => Logger.new(File.open("/dev/null", "w")) }
                     RightAws::Ec2.new($config['access_key'], $config['secret_access_key'], options) || raise(SocketError, "Unable to connect to EC2 API.")
                   end
        end

	def ec2
          self.class.ec2_object
	end

	def info
                return @parsed_info if @parsed_info

                old = $stderr
                $stderr = StringIO.new

                begin
                  @raw_info ||= ec2.describe_instances
                ensure
                  $stderr = old
                end

		@parsed_info = {}
		@raw_info.each { |entry| @parsed_info[entry[:aws_instance_id]] = EC2Instance.new entry }

		return @parsed_info
	end

	def ids_to_names
		return @id_name_map if @id_name_map

		@id_name_map = {}
		keys = @sdb.get_all
		keys.each do |k|
			@id_name_map[id_for_name k.key] = k.key
		end
		return @id_name_map
	end

	def get_instance arg
		return info[arg] if info[arg]
		
		id = id_for_name(arg)
		info[id]
	end

	def id_for_name name
		return if name.nil?

		attrs = @sdb.get_attributes(name)
		return attrs['aws_instance_id']
	end

	def name_instance name, instance_id
		attrs = @sdb.get_attributes(instance_id)
	
		if attrs['aws_instance_id']
			raise RuntimeError, "Error: Amazon SDB already has the value: #{attrs['instance_id']}"
		end
	
		instance = get_instance(instance_id)

		if instance.nil?
			raise RuntimeError, "Can't find information about #{instance_id}"
		end

		@sdb.put_attributes(name, instance)
	end

	def hostname_to_ip hostname
		# Parse the hostname rather than doing a (slow) DNS lookup
		fields = hostname.split "-"
		if fields.size > 0
			return "#{fields[1]}.#{fields[2]}.#{fields[3]}.#{(fields[4]||'').gsub(/\..*/,'')}"
		else
			return ""
		end
	end

	def ssh_key_real_path key, path
		# Oh, the horror
		path = File.expand_path path
		if File.exist?(File.join(path, key))
			key = File.join(path, key)
		elsif File.exist?(File.join(path, "#{key}.pem"))
			key = File.join(path, "#{key}.pem")
		elsif File.exist?(File.join(path, "#{key}-key"))
			key = File.join(path, "#{key}-key")
		end

		return key
	end

end

class EC2Instance < Hash

	def initialize hash
		self.merge! hash
	end
	
	def username
		self.ssh_key_name =~ /ubuntu-images/ ? 'ubuntu' : 'root'
	end

	def friendly_name
		$all_instances.ids_to_names[aws_instance_id] || aws_instance_id
	end

	def key
		$all_instances.ssh_key_real_path ssh_key_name, $config['ssh_key_path']
	end

	def method_missing(method, *params)	
		method = method.to_sym	
		return self[method] if self.keys.collect(&:to_sym).include?(method)	
		super	
	end	

end
      
class EC2Command

	def initialize 
		$all_instances = EC2Instances.new 
	end

        def ec2
          EC2Instances.ec2_object
        end

	# Get and set EC2 instance names
	def name args
		if args.size == 1

			begin
				puts $all_instances.id_for_name args[0]
			rescue SocketError => e
				raise RuntimeError,"Can't connect to Amazon SDB.  No connectivity? "
		    rescue RuntimeError => e
				STDERR.puts "Not an instance name."
			end
			return

		elsif args.size == 2

			$all_instances = EC2Instances.new 
			$all_instances.name_instance(args[0], args[1])
			return

		end
	
		puts "Usage: ec2 name <human readable name>                --> retrieve a value"
		puts "       ec2 name <human readable name> <instance ID>  --> set a value"
	end
	
	# Show all instances, with nice names when available
	def list not_used
		info = $all_instances.info
		puts "-"*95
		puts "Instance	AMI		Key		Size		Date		Public IP"
		puts "-"*95

		all = info.keys.map do |key|
			entry = info[key]
			name = $all_instances.ids_to_names[entry[:aws_instance_id]] ?
				$all_instances.ids_to_names[entry[:aws_instance_id]] : entry[:aws_instance_id]
			[
				sprintf("%-15s", name), 	
				entry[:aws_image_id], 
				sprintf("%13s", entry[:ssh_key_name]),
				entry[:aws_instance_type],
				entry[:aws_launch_time].gsub!(/T.*$/, ''),
				$all_instances.hostname_to_ip(entry[:dns_name])
			]
		end

		all.sort { |a, b| a[4] <=> b[4] }.each { |entry| puts entry.join("	") }

		puts "-"*95
	end
	
	# Connect to a named instance over ssh
	def ssh args
		info = $all_instances.get_instance(args.first)

		if !info
			puts "Instance name not recognized."
			exit
		end
		
		username = 'root'
		if info[:ssh_key_name] =~ /ubuntu-images/
			username = 'ubuntu'
		end
	
		key = $all_instances.ssh_key_real_path info[:ssh_key_name], $config['ssh_key_path']
	
		# Call SSH and pass through all the other ssh options
		exec "ssh -i #{key} #{username}@#{info[:dns_name]} #{args[1..args.size].join(' ')}"
	end
	
	# Copy files to/from remote named instances over SSH
	def scp args
		host = args.select { |a| a =~ /\S+:/ }
	
		if host.nil?
			raise RuntimeError, "Can't find host from command string (#{args.join(' ')})."
		end
	
		hostname, file = host.first.split(':')
	
		begin
			info = $all_instances.get_instance(hostname)
		rescue Amazon::SDB::RecordNotFoundError => e
			# Make it a general error so we can capture it upstream
			raise RuntimeError, e.to_s
		end
	
		username = 'root'
		if info[:ssh_key_name] =~ /ubuntu-images/
			username = 'ubuntu'
		end
	
		key = $all_instances.ssh_key_real_path info[:ssh_key_name], $config['ssh_key_path']
		instance_ip = info[:dns_name]
	
		filtered_args = args.map { |a| a.sub(hostname, "#{username}@#{instance_ip}") }
	
		# Call SCP and filter through all the other options
		exec "scp -i #{key} #{filtered_args.join(' ')}"
	end

	# OSX-specific: open browser to instance, using HTTP on port 80
	def http args
		info = $all_instances.get_instance(args.first)

		if info.nil?
			raise RuntimeError, "Can't find host from command string"
		end

		exec "open -a #{$config['web_browser']} http://#{info[:dns_name]}/"
	end

	# Edit the config file (or create if none)
	def config args
		config_path = File.join(ENV['HOME'], ".ec2rc")
		if !File.exist? config_path
			File.open(config_path, "w") do |file|
				text = <<-EOF.gsub(/^\t{4}/, '') 
				--- 
				# Where your SSH keys are on the disk
				ssh_key_path: 
				# Which browser you wish to use for HTTP
				web_browser: /Applications/Firefox.app
				# AWS keys
				access_key: 
				secret_access_key: 
				# Custom plugins can be loaded thus:
				#
				# custom_commands: 
				#   RemoteCommands: ~/.ec2_remote_commands

				EOF
				file.write text
			end
		end

		if ENV.has_key? 'EDITOR'
			exec "#{ENV['EDITOR']} #{config_path}" 
		else
			exec "vim #{config_path}" 
		end
	end

	# Write hosts to STDOUT
	def ssh_config(*args)
		collection = $all_instances.info
		strings = collection.keys.map do |instance_name|
			instance = EC2Instance.new(collection[instance_name])
			"Host #{instance.friendly_name}\n	IdentityFile #{instance.key}\n	HostName #{instance.dns_name}\n	User #{instance.username}"
		end
		puts strings.join("\n\n")
	end
end


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

# We can be called like 'ec2 name ...' or 'ec2-name ...'
if $0 == 'ec2'
	ARGV.slice! 0
elsif $0 =~ /ec2-([a-z]+)$/
	ARGV.unshift($1)
end

# Load config hash
if File.exist? File.join(ENV['HOME'], '.ec2rc')
	$config = YAML.load_file(File.join(ENV['HOME'], '.ec2rc'))
else

	if $ARGV[0] != 'config'
	    STDERR.print "Can't open your .ec2rc file.  "
		STDERR.puts "Consider running 'ec2 config' to create it." 
	end

	$config = {}
end

command = EC2Command.new
$plugins = []

# Load commands plugins described in the config
if $config.has_key?('custom_commands') && $config['custom_commands'].size > 0

	$config['custom_commands'].each do |name, path|
		full_path = File.expand_path("#{path}.rb")

		if !File.exists? full_path
			STDERR.puts "Failed adding #{name} command module from #{path}: File not found."
			next
		end

		require full_path
		command.extend name.constantize
		$plugins << name
	end
end

if $0 !~ /spec$/
	
	# Command names
	begin
		if ARGV.size > 0
			if command.respond_to? ARGV[0]
				command.send ARGV[0], ARGV[1..ARGV.size]
				exit
			else
				puts "Invalid command."
			end
		end
	rescue RuntimeError => e
		# Generally we don't want the stack trace for our errors
	  STDERR.puts e.to_s
	  exit 1
	end
	
	# Usage for the main command object
	puts "Usage: ec2 [command]"
	puts "	Commands:"
	puts "	  - list         --> List instances"
	puts "	  - name         --> Set a name or get the instance ID for a name"
	puts "	  - ssh          --> Connect to the instance over ssh"
	puts "	  - scp          --> Copy a file to or from the instance using scp"
	puts "	  - http         --> Connect to port 80 on the instance in a web browser"
	puts "	  - config       --> Edit existing or a create new configuration file"
	puts "	  - ssh_config   --> List hosts in an ssh_config friendly format"

  $plugins.each do |plugin|
    usage_method = "#{plugin.to_s.underscore}_usage"
    if command.respond_to? usage_method
      command.send usage_method
    end
  end
end
